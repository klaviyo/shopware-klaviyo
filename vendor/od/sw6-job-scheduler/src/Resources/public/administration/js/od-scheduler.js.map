{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-job-sub-jobs/od-job-sub-jobs.scss","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-entity-listing/od-entity-listing.scss","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-grouped-view/od-grouped-view.scss","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-scheduler-charts/od-scheduler-charts.scss","webpack:///./node_modules/vue-style-loader/lib/listToStyles.js","webpack:///./node_modules/vue-style-loader/lib/addStylesClient.js","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-entity-listing/od-entity-listing.html.twig","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-entity-listing/index.js","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-job-status-badge/index.js","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-job-status-badge/od-job-status-badge.html.twig","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/util/job.helper.js","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/module/od-job/page/od-job-listing-index/index.js","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/module/od-job/page/od-job-listing-index/od-job-listing-index.html.twig","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/module/od-job/index.js","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/service/api/od-reschedule.service.js","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/init/api-service.init.js","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-job-info/od-job-info.html.twig","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-job-info/index.js","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-job-sub-jobs/od-job-sub-jobs.html.twig","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-job-sub-jobs/index.js","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-scheduler-charts/index.js","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-scheduler-charts/od-scheduler-charts.html.twig","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-grouped-view/od-grouped-view.html.twig","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/component/od-grouped-view/index.js","webpack:////var/www/html/custom/plugins/klaviyo-module/vendor/od/sw6-job-scheduler/src/Resources/app/administration/src/module/od-job/page/od-job-listing-index/od-job-listing-index.scss"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","content","default","locals","add","listToStyles","parentId","list","styles","newStyles","length","item","id","part","css","media","sourceMap","parts","push","hasDocument","document","DEBUG","Error","stylesInDom","head","getElementsByTagName","singletonElement","singletonCounter","isProduction","noop","options","ssrIdKey","isOldIE","navigator","test","userAgent","toLowerCase","addStylesClient","_isProduction","_options","addStylesToDom","newList","mayRemove","domStyle","refs","j","addStyle","createStyleElement","styleElement","createElement","type","appendChild","obj","update","remove","querySelector","parentNode","removeChild","styleIndex","applyToSingletonTag","applyToTag","newObj","textStore","replaceText","index","replacement","filter","Boolean","join","styleSheet","cssText","cssNode","createTextNode","childNodes","insertBefore","setAttribute","ssrId","sources","btoa","unescape","encodeURIComponent","JSON","stringify","firstChild","Component","Shopware","Data","Criteria","extend","template","props","items","Array","required","itemIdentifierProperty","String","preSelection","isGroupedView","jobTypes","computed","jobRepository","this","repositoryFactory","data","records","selection","assign","successItems","pendingItems","errorItems","reloadInterval","page","limit","methods","canDelete","indexOf","status","selectAll","selected","_this","$delete","forEach","isSelected","selectItem","$emit","$set","register","additionalClass","variant","JobHelper","_classCallCheck","jobs","job","messages","sort","a","b","createdAt","_regeneratorRuntime","Op","hasOwn","desc","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","define","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","context","Context","makeInvokeMethod","tryCatch","fn","arg","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","inject","mixins","filterCriteria","jobItems","currentSortBy","sortDirection","isLoading","showJobInfoModal","showJobSubsModal","currentJobID","showMessagesModal","currentJobMessages","total","groupCreationDate","sortType","jobDisplayType","autoLoad","autoLoadIsActive","autoReloadInterval","watch","_handleAutoReload","stopAutoLoading","filterCriteriaChanged","messageRepository","columns","label","$tc","allowResize","width","sortable","visible","jobDisplayMode","created","createdComponent","paginate","_ref","getList","criteria","active","setInterval","updateList","$refs","jobGroups","initGroupedView","jobCharts","initChartData","clearInterval","pageChange","getLinkParams","backPath","$route","_this2","_callee","_context","addFilter","equals","addSorting","addAssociation","equalsAny","search","api","sortMessages","args","arguments","apply","getMessagesCount","getChildrenCount","subJobs","_this3","onRefresh","onDeleteJob","jobId","_this4","delete","rescheduleJob","_this5","OdRescheduleService","createNotificationSuccess","message","createNotificationError","showSubJobs","showJobMessages","beforeDestroy","Module","title","description","color","icon","snippets","enGB","deDE","routes","detail","path","params","ApiService","Classes","_ApiService","_inherits","_super","_createSuper","httpClient","loginService","apiEndpoint","headers","getBasicHeaders","post","concat","getApiBasePath","response","handleResponse","Application","initContainer","getContainer","addServiceProvider","container","jobItem","initPageData","jobChildrenColumns","dataIndex","inlineEdit","initModalData","showMessageModal","statisticDateRanges","yesterday","chartSeries","colors","0","1","2","3","4","5","6","7","8","9","10","getTimeUnitInterval","statisticDateRange","dateAgo","_this$statisticDateRa","date","Date","selectedDateRange","dateRange","setHours","getHours","setDate","getDate","chartOptionsCount","text","style","fontSize","fontWeight","xaxis","min","getTime","labels","datetimeUTC","yaxis","tickAmount","formatter","parseInt","setLimit","createStatusChartSeries","createTypeChartSeries","typeCharts","_step","_iterator","_createForOfIteratorHelper","_loop","parseDate","chart","existingIndex","findIndex","e","x","y","f","statusCharts","_step2","_iterator2","_loop2","successData","pendingData","errorData","getRandomColor","Math","random","toString","find","substring","lastIndexOf","replace","valueOf","groupedItems","jobMessagesColumns","align","handler","deep","fromDate","range","gte","toDate","lte","sortJobs","groupedItemsTypes","getJobsByType","types","groupType","toUpperCase","groupTitle","showJobInfo"],"mappings":"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","file":"static/js/od-scheduler.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bundles/odscheduler/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"ovSi\");\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./od-job-sub-jobs.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1cb950fc\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./od-entity-listing.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"7462f187\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./od-grouped-view.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"36416df9\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./od-scheduler-charts.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"6f4bc700\", content, true, {});","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nexport default function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n","/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nimport listToStyles from './listToStyles'\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nexport default function addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n","export default \"{% block sw_data_grid_bulk_selected_actions_content %}\\n    {% block sw_data_grid_bulk_edit_content %}\\n        \\n        <a\\n                v-if=\\\"allowBulkEdit\\\"\\n                class=\\\"link link-primary\\\"\\n                @click=\\\"onClickBulkEdit\\\"\\n        >\\n            {{ $tc('global.sw-bulk-edit-modal.bulkEdit') }}\\n        </a>\\n    {% endblock %}\\n\\n    {% block sw_data_grid_bulk_delete_content %}\\n        \\n        <a\\n                v-if=\\\"allowDelete\\\"\\n                class=\\\"link link-danger\\\"\\n                @click=\\\"showBulkDeleteModal = true\\\"\\n        >\\n            {{ $tc('global.default.delete') }}\\n        </a>\\n    {% endblock %}\\n{% endblock %}\\n\\n{% block sw_data_grid_slot_bulk_modals %}\\n    {% block sw_data_grid_bulk_edit_modal %}\\n        <slot\\n                name=\\\"bulk-edit-modal\\\"\\n                v-bind=\\\"{ selection }\\\"\\n        >\\n            {% block sw_data_grid_slot_bulk_edit_modal %}\\n                <sw-bulk-edit-modal\\n                        v-if=\\\"showBulkEditModal\\\"\\n                        :selection=\\\"selection\\\"\\n                        :bulk-grid-edit-columns=\\\"bulkGridEditColumns\\\"\\n                        @modal-close=\\\"onCloseBulkEditModal\\\"\\n                />\\n            {% endblock %}\\n        </slot>\\n    {% endblock %}\\n\\n    {% block sw_data_grid_bulk_delete_modal %}\\n        <sw-modal\\n                v-if=\\\"showBulkDeleteModal\\\"\\n                variant=\\\"small\\\"\\n                :title=\\\"$tc('global.default.warning')\\\"\\n                @modal-close=\\\"showBulkDeleteModal = false\\\"\\n        >\\n            <p class=\\\"sw-data-grid__confirm-bulk-delete-text\\\">\\n                <slot\\n                        name=\\\"bulk-modal-delete-confirm-text\\\"\\n                        v-bind=\\\"{ selectionCount }\\\"\\n                >\\n                    {{ $tc('global.entity-components.deleteMessage', selectionCount, { count: selectionCount }) }}\\n                </slot>\\n            </p>\\n\\n            <template #modal-footer>\\n                <slot name=\\\"bulk-modal-cancel\\\">\\n                    <sw-button\\n                            size=\\\"small\\\"\\n                            @click=\\\"showBulkDeleteModal = false\\\"\\n                    >\\n                        {{ $tc('global.default.cancel') }}\\n                    </sw-button>\\n                </slot>\\n\\n                <slot\\n                        name=\\\"bulk-modal-delete-items\\\"\\n                        v-bind=\\\"{ isBulkLoading, deleteItems }\\\"\\n                >\\n                    <sw-button\\n                            variant=\\\"danger\\\"\\n                            size=\\\"small\\\"\\n                            :is-loading=\\\"isBulkLoading\\\"\\n                            @click=\\\"deleteItems\\\"\\n                    >\\n                        {{ $tc('global.default.delete') }}\\n                    </sw-button>\\n                </slot>\\n            </template>\\n        </sw-modal>\\n    {% endblock %}\\n{% endblock %}\\n\\n{% block sw_data_grid_slot_actions %}\\n    <slot\\n            name=\\\"detail-action\\\"\\n            v-bind=\\\"{ item }\\\"\\n    >\\n        <sw-context-menu-item\\n                v-if=\\\"detailRoute\\\"\\n                v-tooltip=\\\"{\\n            message: $tc('sw-privileges.tooltip.warning'),\\n            disabled: allowEdit || allowView,\\n            showOnDisabledElements: true,\\n            zIndex: 9050,\\n        }\\\"\\n                class=\\\"sw-entity-listing__context-menu-edit-action\\\"\\n                :disabled=\\\"!allowEdit && !allowView\\\"\\n                :router-link=\\\"{ name: detailRoute, params: { id: item.id } }\\\"\\n        >\\n            {{ detailPageLinkText }}\\n        </sw-context-menu-item>\\n    </slot>\\n\\n    <slot\\n            name=\\\"more-actions\\\"\\n            v-bind=\\\"{ item }\\\"\\n    ></slot>\\n\\n    <slot\\n            name=\\\"delete-action\\\"\\n            v-bind=\\\"{ item, showDelete, allowDelete }\\\"\\n    >\\n        <sw-context-menu-item\\n                v-tooltip.bottom=\\\"{\\n            message: $tc('sw-privileges.tooltip.warning'),\\n            disabled: allowDelete,\\n            showOnDisabledElements: true,\\n            zIndex: 9050,\\n        }\\\"\\n                :disabled=\\\"!allowDelete\\\"\\n                class=\\\"sw-entity-listing__context-menu-edit-delete\\\"\\n                variant=\\\"danger\\\"\\n                @click=\\\"showDelete(item.id)\\\"\\n        >\\n            {{ $tc('global.default.delete') }}\\n        </sw-context-menu-item>\\n\\n        <sw-context-menu-item\\n                class=\\\"sw-entity-listing__context-menu-edit-test\\\"\\n                variant=\\\"info\\\"\\n        >\\n            Test\\n        </sw-context-menu-item>\\n    </slot>\\n{% endblock %}\\n\\n{% block sw_data_grid_slot_action_modals %}\\n    <sw-modal\\n            v-if=\\\"deleteId === item.id\\\"\\n            :title=\\\"$tc('global.default.warning')\\\"\\n            variant=\\\"small\\\"\\n            @modal-close=\\\"closeModal\\\"\\n    >\\n        <p class=\\\"sw-listing__confirm-delete-text\\\">\\n            <slot\\n                    name=\\\"delete-confirm-text\\\"\\n                    v-bind=\\\"{ item }\\\"\\n            >\\n                {{ $tc('global.entity-components.deleteMessage') }}\\n            </slot>\\n        </p>\\n\\n        <template #modal-footer>\\n            <slot\\n                    name=\\\"delete-modal-footer\\\"\\n                    v-bind=\\\"{ item }\\\"\\n            >\\n                <slot\\n                        name=\\\"delete-modal-cancel\\\"\\n                        v-bind=\\\"{ item }\\\"\\n                >\\n                    <sw-button\\n                            size=\\\"small\\\"\\n                            @click=\\\"closeModal\\\"\\n                    >\\n                        {{ $tc('global.default.cancel') }}\\n                    </sw-button>\\n                </slot>\\n\\n                <slot\\n                        name=\\\"delete-modal-delete-item\\\"\\n                        v-bind=\\\"{ item }\\\"\\n                >\\n                    <sw-button\\n                            variant=\\\"danger\\\"\\n                            size=\\\"small\\\"\\n                            @click=\\\"deleteItem(item.id)\\\"\\n                    >\\n                        {{ $tc('global.default.delete') }}\\n                    </sw-button>\\n                </slot>\\n            </slot>\\n        </template>\\n    </sw-modal>\\n\\n\\n{% endblock %}\\n\\n  {% block sw_data_grid_select_item_checkbox %}\\n      <sw-checkbox-field\\n              v-if=\\\"canDelete(item)\\\"\\n              :disabled=\\\"!isRecordSelectable(item)\\\"\\n              :value=\\\"isSelected(item[itemIdentifierProperty])\\\"\\n              @change=\\\"selectItem($event, item)\\\"\\n      />\\n  {% endblock %}\\n\\n\\n{% block sw_data_grid_table %}\\n    <table ref=\\\"table\\\"\\n            class=\\\"sw-data-grid__table\\\"\\n    >\\n\\n        {% block sw_data_grid_header %}\\n            <thead\\n                    v-if=\\\"showHeader\\\"\\n                    class=\\\"sw-data-grid__header\\\"\\n            >\\n\\n            {% block sw_data_grid_header_row %}\\n                <tr class=\\\"sw-data-grid__row\\\">\\n\\n                    {% block sw_data_grid_header_cell_selection %}\\n                        <th\\n                                v-if=\\\"showSelection\\\"\\n                                class=\\\"sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--selection\\\"\\n                        >\\n                            {% block sw_data_grid_header_cell_selection_content %}\\n                                <div class=\\\"sw-data-grid__cell-content\\\">\\n                                    {% block sw_data_grid_select_all_checkbox %}\\n                                        <sw-checkbox-field\\n                                                v-if=\\\"records && records.length > 0\\\"\\n                                                :disabled=\\\"isSelectAllDisabled\\\"\\n                                                class=\\\"sw-data-grid__select-all\\\"\\n                                                :value=\\\"allSelectedChecked\\\"\\n                                                @change=\\\"selectAll\\\"\\n                                        />\\n                                    {% endblock %}\\n                                </div>\\n                            {% endblock %}\\n                        </th>\\n                    {% endblock %}\\n\\n                    {% block sw_data_grid_header_columns %}\\n                        <th\\n                                v-for=\\\"(column, columnIndex) in currentColumns\\\"\\n                                v-show=\\\"column.visible\\\"\\n                                :key=\\\"`${column.property}-${columnIndex}`\\\"\\n                                ref=\\\"column\\\"\\n                                class=\\\"sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--property\\\"\\n                                :class=\\\"getHeaderCellClasses(column, columnIndex)\\\"\\n                                :style=\\\"{ width: column.width, minWidth: column.width }\\\"\\n                                @click=\\\"onClickHeaderCell($event, column)\\\"\\n                        >\\n\\n                            {% block sw_data_grid_header_columns_content %}\\n                                <div class=\\\"sw-data-grid__cell-content\\\">\\n\\n                                    <slot\\n                                            :name=\\\"`column-label-${column.property}`\\\"\\n                                            v-bind=\\\"{ column, columnIndex }\\\"\\n                                    >\\n\\n                                        {% block sw_data_grid_header_columns_icon %}\\n                                            <sw-icon\\n                                                    v-if=\\\"column.iconLabel\\\"\\n                                                    :name=\\\"column.iconLabel\\\"\\n                                            >\\n                                                {{ $te(column.label) ? $tc(column.label) : column.label }}\\n                                            </sw-icon>\\n                                        {% endblock %}\\n\\n                                        {% block sw_data_grid_header_columns_label %}\\n                                            <template v-else>\\n                                                {{ $te(column.label) ? $tc(column.label) : column.label }}\\n                                            </template>\\n                                        {% endblock %}\\n                                    </slot>\\n\\n                                    {% block sw_data_grid_column_actions %}\\n                                        <sw-context-button\\n                                                v-if=\\\"allowColumnEdit && !isInlineEditActive\\\"\\n                                                class=\\\"sw-data-grid__action-edit-column\\\"\\n                                        >\\n                                            {% block sw_data_grid_column_actions_hide %}\\n                                                <sw-context-menu-item\\n                                                        :disabled=\\\"column.primary\\\"\\n                                                        variant=\\\"danger\\\"\\n                                                        @click=\\\"hideColumn(columnIndex)\\\"\\n                                                >\\n                                                    {{ $tc('global.sw-data-grid.labelColumnHide') }}\\n                                                </sw-context-menu-item>\\n                                            {% endblock %}\\n                                        </sw-context-button>\\n                                    {% endblock %}\\n\\n                                    {% block sw_data_grid_sort_indicator %}\\n                                        <span\\n                                                v-if=\\\"column.sortable && currentSortBy === column.dataIndex\\\"\\n                                                class=\\\"sw-data-grid__sort-indicator\\\"\\n                                        >\\n                                {% block sw_data_grid_sort_indicator_transition %}\\n                                    <transition\\n                                            name=\\\"sort-indicator\\\"\\n                                            mode=\\\"out-in\\\"\\n                                    >\\n                                    {% block sw_data_grid_sort_indicator_icon_asc %}\\n                                        <sw-icon\\n                                                v-if=\\\"currentSortDirection === 'ASC'\\\"\\n                                                key=\\\"ASC\\\"\\n                                                name=\\\"small-arrow-small-up\\\"\\n                                                size=\\\"16px\\\"\\n                                        />\\n                                    {% endblock %}\\n\\n                                        {% block sw_data_grid_sort_indicator_icon_desc %}\\n                                            <sw-icon\\n                                                    v-else\\n                                                    key=\\\"DESC\\\"\\n                                                    name=\\\"small-arrow-small-down\\\"\\n                                                    size=\\\"16px\\\"\\n                                            />\\n                                        {% endblock %}\\n                                </transition>\\n                                {% endblock %}\\n                            </span>\\n                                    {% endblock %}\\n                                </div>\\n                            {% endblock %}\\n\\n                            {% block sw_data_grid_header_columns_resize %}\\n                                <span\\n                                        v-if=\\\"column.allowResize\\\"\\n                                        class=\\\"sw-data-grid__cell-resize\\\"\\n                                        @mousedown=\\\"onStartResize($event, column, columnIndex)\\\"\\n                                ></span>\\n                            {% endblock %}\\n                        </th>\\n                    {% endblock %}\\n\\n                    {% block sw_data_grid_header_cell_spacer %}\\n                        <th\\n                                v-if=\\\"hasResizeColumns\\\"\\n                                aria-hidden=\\\"true\\\"\\n                                class=\\\"sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell-spacer\\\"\\n                        >\\n                            <div class=\\\"sw-data-grid__cell-content\\\"></div>\\n                        </th>\\n                    {% endblock %}\\n\\n                    {% block sw_data_grid_header_cell_actions %}\\n                        <th\\n                                v-if=\\\"showActions\\\"\\n                                class=\\\"sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--actions sw-data-grid__cell-settings\\\"\\n                                :class=\\\"{ 'is--loading': loading }\\\"\\n                        >\\n                            {% block sw_data_grid_header_cell_actions_content %}\\n                                <div class=\\\"sw-data-grid__cell-content\\\">\\n                                    {% block sw_data_grid_settings %}\\n                                        <sw-data-grid-settings\\n                                                v-if=\\\"showSettings\\\"\\n                                                :columns=\\\"currentColumns\\\"\\n                                                :compact=\\\"compact\\\"\\n                                                :previews=\\\"previews\\\"\\n                                                :enable-previews=\\\"hasPreviewSlots\\\"\\n                                                :disabled=\\\"isInlineEditActive\\\"\\n                                                @change-compact-mode=\\\"onChangeCompactMode\\\"\\n                                                @change-preview-images=\\\"onChangePreviews\\\"\\n                                                @change-column-visibility=\\\"onChangeColumnVisibility\\\"\\n                                                @change-column-order=\\\"onChangeColumnOrder\\\"\\n                                        >\\n                                            {% block sw_data_grid_settings_additional_settings %}\\n                                                <template #additionalSettings>\\n                                                    {% block sw_data_grid_settings_additional_settings_inner %}\\n                                                        <slot name=\\\"additionalSettings\\\"></slot>\\n                                                    {% endblock %}\\n                                                </template>\\n                                            {% endblock %}\\n                                        </sw-data-grid-settings>\\n\\n                                        {% block sw_data_grid_settings_custom_settings %}\\n                                            <slot name=\\\"customSettings\\\">\\n                                                {% block sw_data_grid_settings_custom_settings_slot %}{% endblock %}\\n                                            </slot>\\n                                        {% endblock %}\\n                                    {% endblock %}\\n                                </div>\\n                            {% endblock %}\\n                        </th>\\n                    {% endblock %}\\n                </tr>\\n            {% endblock %}\\n            </thead>\\n        {% endblock %}\\n\\n        {% block sw_data_grid_body %}\\n            <tbody\\n                    v-if=\\\"!loading\\\"\\n                    class=\\\"sw-data-grid__body\\\"\\n            >\\n\\n            {% block sw_data_grid_body_row %}\\n                <tr\\n                        v-for=\\\"(item, itemIndex) in records\\\"\\n                        :key=\\\"item.id\\\"\\n                        class=\\\"sw-data-grid__row\\\"\\n                        :class=\\\"getRowClasses(item, itemIndex)\\\"\\n                >\\n\\n                    {% block sw_data_grid_body_cell_selection %}\\n                        <td\\n                                v-if=\\\"showSelection\\\"\\n                                class=\\\"sw-data-grid__cell sw-data-grid__cell--selection\\\"\\n                        >\\n                            <slot\\n                                    name=\\\"selection-content\\\"\\n                                    v-bind=\\\"{ item, isSelected, isRecordSelectable, selectItem, itemIdentifierProperty }\\\"\\n                            >\\n                                {% block sw_data_grid_body_cell_selection_content %}\\n                                    <div class=\\\"sw-data-grid__cell-content\\\">\\n                                        {% block sw_data_grid_select_item_checkbox %}\\n                                            <sw-checkbox-field v-if=\\\"canDelete(item)\\\"\\n                                                    :disabled=\\\"!isRecordSelectable(item)\\\"\\n                                                    :value=\\\"isSelected(item[itemIdentifierProperty])\\\"\\n                                                    @change=\\\"selectItem($event, item)\\\"\\n                                            />\\n                                        {% endblock %}\\n                                    </div>\\n                                {% endblock %}\\n                            </slot>\\n                        </td>\\n                    {% endblock %}\\n\\n                    {% block sw_data_grid_body_columns %}\\n                        <td\\n                                v-for=\\\"(column, columnIndex) in currentColumns\\\"\\n                                v-show=\\\"column.visible\\\"\\n                                :key=\\\"`${item.id}-${columnIndex}`\\\"\\n                                class=\\\"sw-data-grid__cell\\\"\\n                                :class=\\\"getCellClasses(column)\\\"\\n                                @dblclick=\\\"onDbClickCell(item)\\\"\\n                        >\\n\\n                            {% block sw_data_grid_body_columns_content %}\\n                                <div class=\\\"sw-data-grid__cell-content\\\">\\n\\n                                    {% block sw_data_grid_preview_slot %}\\n                                        <slot\\n                                                v-if=\\\"previews && !isInlineEdit(item)\\\"\\n                                                :name=\\\"`preview-${column.property}`\\\"\\n                                                v-bind=\\\"{ item, column, compact }\\\"\\n                                        ></slot>\\n                                    {% endblock %}\\n\\n                                    {% block sw_data_grid_columns_slot %}\\n                                        <slot\\n                                                :name=\\\"`column-${column.property}`\\\"\\n                                                v-bind=\\\"{ item, itemIndex, column, columnIndex, compact, isInlineEdit: (isInlineEdit(item) && column.hasOwnProperty('inlineEdit')) }\\\"\\n                                        >\\n                                            <template v-if=\\\"column.inlineEdit === 'boolean'\\\">\\n                                                {% block sw_data_grid_columns_boolean %}\\n                                                    <sw-data-grid-column-boolean\\n                                                            v-model=\\\"item[column.property]\\\"\\n                                                            :is-inline-edit=\\\"isInlineEdit(item) && column.hasOwnProperty('inlineEdit')\\\"\\n                                                    />\\n                                                {% endblock %}\\n                                            </template>\\n                                            <template v-else>\\n                                                {% block sw_data_grid_columns_inline_edit %}\\n                                                    <template v-if=\\\"isInlineEdit(item) && column.hasOwnProperty('inlineEdit')\\\">\\n                                                        {% block sw_data_grid_columns_render_inline_edit %}\\n                                                            <sw-data-grid-inline-edit\\n                                                                    :column=\\\"column\\\"\\n                                                                    :compact=\\\"compact\\\"\\n                                                                    :value=\\\"item[column.property]\\\"\\n                                                                    @input=\\\"item[column.property] = $event\\\"\\n                                                            />\\n                                                        {% endblock %}\\n                                                    </template>\\n                                                {% endblock %}\\n\\n                                                {% block sw_data_grid_columns_value %}\\n                                                    <template v-else>\\n                                                        {% block sw_data_grid_columns_render_router_link %}\\n                                                            <router-link\\n                                                                    v-if=\\\"column.routerLink\\\"\\n                                                                    class=\\\"sw-data-grid__cell-value\\\"\\n                                                                    :to=\\\"{ name: column.routerLink, params: { id: item.id } }\\\"\\n                                                            >\\n                                                                {{ renderColumn(item, column) }}\\n                                                            </router-link>\\n                                                        {% endblock %}\\n                                                        {% block sw_data_grid_columns_render_value %}\\n                                                            <span\\n                                                                    v-else\\n                                                                    class=\\\"sw-data-grid__cell-value\\\"\\n                                                            >\\n                                            {{ renderColumn(item, column) }}\\n                                        </span>\\n                                                        {% endblock %}\\n                                                    </template>\\n                                                {% endblock %}\\n                                            </template>\\n                                        </slot>\\n                                    {% endblock %}\\n                                </div>\\n                            {% endblock %}\\n                        </td>\\n                    {% endblock %}\\n\\n                    {% block sw_data_grid_body_cell_spacer %}\\n                        <td\\n                                v-if=\\\"hasResizeColumns\\\"\\n                                aria-hidden=\\\"true\\\"\\n                                class=\\\"sw-data-grid__cell sw-data-grid__cell-spacer\\\"\\n                                @dblclick=\\\"onDbClickCell(item)\\\"\\n                        >\\n                            <div class=\\\"sw-data-grid__cell-content\\\"></div>\\n                        </td>\\n                    {% endblock %}\\n\\n                    {% block sw_data_grid_body_cell_actions %}\\n                        <td\\n                                v-if=\\\"showActions\\\"\\n                                class=\\\"sw-data-grid__cell sw-data-grid__cell--actions\\\"\\n                        >\\n                            {% block sw_data_grid_body_cell_actions_content %}\\n                                <div class=\\\"sw-data-grid__cell-content\\\">\\n\\n                                    {% block sw_data_grid_inline_edit_actions %}\\n                                        <template v-if=\\\"isInlineEditActive && currentInlineEditId === item[itemIdentifierProperty]\\\">\\n\\n                                            {% block sw_data_grid_inline_edit_actions_cancel %}\\n                                                <sw-button\\n                                                        class=\\\"sw-data-grid__inline-edit-cancel\\\"\\n                                                        size=\\\"x-small\\\"\\n                                                        :title=\\\"$tc('global.default.cancel')\\\"\\n                                                        :aria-label=\\\"$tc('global.default.cancel')\\\"\\n                                                        square\\n                                                        @click=\\\"onClickCancelInlineEdit(item)\\\"\\n                                                >\\n                                                    {% block sw_data_grid_inline_edit_actions_cancel_icon %}\\n                                                        <sw-icon\\n                                                                name=\\\"small-default-x-line-small\\\"\\n                                                                size=\\\"14px\\\"\\n                                                        />\\n                                                    {% endblock %}\\n                                                </sw-button>\\n                                            {% endblock %}\\n\\n                                            {% block sw_data_grid_inline_edit_actions_save %}\\n                                                <sw-button\\n                                                        class=\\\"sw-data-grid__inline-edit-save\\\"\\n                                                        variant=\\\"primary\\\"\\n                                                        size=\\\"x-small\\\"\\n                                                        :title=\\\"$tc('global.default.save')\\\"\\n                                                        :aria-label=\\\"$tc('global.default.save')\\\"\\n                                                        square\\n                                                        @click=\\\"onClickSaveInlineEdit(item)\\\"\\n                                                >\\n                                                    {% block sw_data_grid_inline_edit_actions_save_icon %}\\n                                                        <sw-icon\\n                                                                name=\\\"small-default-checkmark-line-small\\\"\\n                                                                size=\\\"14px\\\"\\n                                                        />\\n                                                    {% endblock %}\\n                                                </sw-button>\\n                                            {% endblock %}\\n                                        </template>\\n                                    {% endblock %}\\n\\n                                    {% block sw_data_grid_body_cell_actions_menu %}\\n                                        <sw-context-button\\n                                                v-else\\n                                                class=\\\"sw-data-grid__actions-menu\\\"\\n                                        >\\n                                            <slot\\n                                                    name=\\\"actions\\\"\\n                                                    :item=\\\"item\\\"\\n                                                    :itemIndex=\\\"itemIndex\\\"\\n                                            >\\n                                                {% block sw_data_grid_slot_actions %}{% endblock %}\\n                                            </slot>\\n                                        </sw-context-button>\\n                                    {% endblock %}\\n\\n                                    {% block sw_data_grid_body_cell_action_modals %}\\n                                        <slot\\n                                                name=\\\"action-modals\\\"\\n                                                :item=\\\"item\\\"\\n                                        >\\n                                            {% block sw_data_grid_slot_action_modals %}{% endblock %}\\n                                        </slot>\\n                                    {% endblock %}\\n                                </div>\\n                            {% endblock %}\\n                        </td>\\n                    {% endblock %}\\n                </tr>\\n            {% endblock %}\\n            </tbody>\\n        {% endblock %}\\n\\n        {% block sw_data_grid_skeleton %}\\n            <sw-data-grid-skeleton\\n                    v-else\\n                    :show-selection=\\\"showSelection\\\"\\n                    :show-actions=\\\"showActions\\\"\\n                    :current-columns=\\\"currentColumns\\\"\\n                    :has-resize-columns=\\\"hasResizeColumns\\\"\\n                    :item-amount=\\\"skeletonItemAmount\\\"\\n                    class=\\\"sw-data-grid__body\\\"\\n            />\\n        {% endblock %}\\n    </table>\\n{% endblock %}\";","import template from './od-entity-listing.html.twig'\nimport './od-entity-listing.scss';\n\nconst {Component} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.extend('od-entity-listing', 'sw-entity-listing', {\n    template,\n\n    props: {\n        items: {\n            type: Array,\n            required: true,\n        },\n\n        itemIdentifierProperty: {\n            type: String,\n            required: false,\n            default: 'id',\n        },\n\n        preSelection: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n\n        isGroupedView: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        jobTypes: {\n            type: Array,\n            required: false,\n            default: () => []\n        }\n    },\n\n    computed: {\n        jobRepository() {\n            return this.repositoryFactory.create('od_scheduler_job');\n        }\n    },\n\n    data() {\n        return {\n            /** @type {Array} */\n            records: this.items,\n            selection: Object.assign({}, this.preSelection || {}),\n            successItems: false,\n            pendingItems: false,\n            errorItems: false,\n            reloadInterval: null,\n            page: 1,\n            limit: 25\n        };\n    },\n\n    methods: {\n        canDelete(item) {\n            return ['error', 'succeed'].indexOf(item.status) !== -1;\n        },\n\n        selectAll(selected) {\n            this.$delete(this.selection);\n            this.records.forEach(item => {\n                if (this.isSelected(item[this.itemIdentifierProperty]) !== selected) {\n                    this.selectItem(selected, item);\n                }\n            });\n\n            this.$emit('select-all-items', this.selection);\n        },\n\n        selectItem(selected, item) {\n            if (!this.canDelete(item)) {\n                return;\n            }\n\n            const selection = this.selection;\n\n            if (selected) {\n                this.$set(this.selection, item[this.itemIdentifierProperty], item);\n            } else if (!selected && selection[item[this.itemIdentifierProperty]]) {\n                this.$delete(this.selection, item[this.itemIdentifierProperty]);\n            }\n\n            this.$emit('select-item', this.selection, item, selected);\n        },\n    },\n});\n","import template from './od-job-status-badge.html.twig';\n\nconst {Component} = Shopware;\n\nComponent.register('od-job-status-badge', {\n    template,\n\n    props: {\n        status: {\n            type: String,\n            required: true,\n        }\n    },\n\n    computed: {\n        additionalClass() {\n            return this.status === 'running' ? '--pulse' : '';\n        },\n\n        variant() {\n            switch (this.status) {\n                case 'error':\n                    return 'error';\n                case 'succeed':\n                case 'running':\n                    return 'success';\n                default:\n                    return '';\n            }\n        },\n    },\n});\n","export default \"<sw-color-badge rounded\\n                :variant=\\\"variant\\\"\\n                :class=\\\"additionalClass\\\"\\n                style=\\\"margin-right: 10px; margin-top: 3px;\\\">\\n</sw-color-badge>\\n\\n\";","export default class JobHelper {\n    static sortMessages(jobs) {\n        jobs.forEach(function (job) {\n            job.messages = job.messages.sort(function (a ,b) {\n                if (a.createdAt > b.createdAt) {\n                    return 1;\n                }\n\n                if (a.createdAt < b.createdAt) {\n                    return -1;\n                }\n\n                return 0;\n            })\n        })\n\n        return jobs;\n    }\n}\n","import template from './od-job-listing-index.html.twig';\nimport JobHelper from \"../../../../util/job.helper\";\nimport './od-job-listing-index.scss';\n\nconst { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('od-job-listing-index', {\n    template,\n\n    inject: [\n        'OdRescheduleService',\n        'repositoryFactory',\n        'filterFactory',\n        'feature'\n    ],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        isGroupedView: {\n            type: Boolean,\n            required: false,\n            default: false\n        },\n        jobTypes: {\n            type: Array,\n            required: false,\n            default: () => []\n        },\n        filterCriteria: {\n            type: Array,\n            required: false,\n            default: () => []\n        }\n    },\n\n    data() {\n        return {\n            jobItems: null,\n            currentSortBy: 'startedAt',\n            sortDirection: 'DESC',\n            isLoading: false,\n            reloadInterval: null,\n            showJobInfoModal: false,\n            showJobSubsModal: false,\n            currentJobID: null,\n            showMessagesModal: false,\n            currentJobMessages: null,\n            total: 0,\n            groupCreationDate: {\n            },\n            sortType: 'status',\n            jobDisplayType: null,\n            autoLoad: false,\n            autoLoadIsActive: false,\n            autoReloadInterval: 60000,\n            page: 1,\n            limit: 25\n        }\n    },\n\n    watch: {\n        autoLoadIsActive() {\n            this._handleAutoReload(this.autoLoadIsActive);\n        },\n\n        jobDisplayType() {\n            this.stopAutoLoading();\n            this.$emit('job-display-type-changed', this.jobDisplayType);\n        },\n\n        filterCriteria() {\n            this.filterCriteriaChanged(this.filterCriteria)\n        }\n    },\n\n    computed: {\n        jobRepository() {\n            return this.repositoryFactory.create('od_scheduler_job');\n        },\n\n        messageRepository() {\n            return this.repositoryFactory.create('od_scheduler_job_message');\n        },\n\n        columns() {\n            return [\n                {\n                    property: 'name',\n                    label: this.$tc('job-listing.page.listing.grid.column.name'),\n                    allowResize: true,\n                    width: '250px',\n                },\n                {\n                    property: 'status',\n                    label: this.$tc('job-listing.page.listing.grid.column.status'),\n                    allowResize: true,\n                    width: '150px',\n                },\n                {\n                    property: 'startedAt',\n                    label: this.$tc('job-listing.page.listing.grid.column.started-at'),\n                    allowResize: true,\n                    width: '170px',\n                    sortable: true\n                },\n                {\n                    property: 'finishedAt',\n                    label: this.$tc('job-listing.page.listing.grid.column.finished-at'),\n                    allowResize: true,\n                    width: '170px',\n                },\n                {\n                    property: 'createdAt',\n                    label: this.$tc('job-listing.page.listing.grid.column.created-at'),\n                    allowResize: true,\n                    width: '170px',\n                },\n                {\n                    property: 'subJobs',\n                    label: this.$tc('job-listing.page.listing.grid.column.child-jobs'),\n                    allowResize: true,\n                    width: '250px',\n                    visible: true,\n                    sortable: false,\n                },\n                {\n                    property: 'messages',\n                    label: this.$tc('job-listing.page.listing.grid.column.messages'),\n                    allowResize: true,\n                    width: '250px',\n                    visible: true,\n                    sortable: false,\n                }\n            ];\n        },\n\n        jobDisplayMode() {\n            return [\n                {\n                    name: this.$tc('job-listing.page.listing.index.list'),\n                    value: 'list'\n                },\n                {\n                    name: this.$tc('job-listing.page.listing.index.grouped'),\n                    value: 'grouped'\n                },\n                {\n                    name: this.$tc('job-listing.page.listing.index.chart'),\n                    value: 'chart'\n                }\n            ]\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        paginate({ page, limit }) {\n            this.page = page;\n            this.limit = limit;\n            this.getList();\n        },\n\n        createdComponent() {\n            this.jobDisplayType = 'list';\n            this.getList();\n        },\n\n        filterCriteriaChanged(criteria) {\n            this.getList(criteria);\n        },\n\n        _handleAutoReload(active) {\n            if (active && this.autoReloadInterval > 0) {\n                if (this.jobDisplayType === 'list') {\n                    this.reloadInterval = setInterval(() => {\n                        this.updateList()\n                    }, this.autoReloadInterval);\n                } else if (this.jobDisplayType === 'grouped') {\n                    this.reloadInterval = setInterval(() => {\n                        this.$refs.jobGroups.initGroupedView()\n                    }, this.autoReloadInterval);\n                } else if (this.jobDisplayType === 'chart') {\n                    this.reloadInterval = setInterval(() => {\n                        this.$refs.jobCharts.initChartData()\n                    }, this.autoReloadInterval);\n                }\n            } else {\n                clearInterval(this.reloadInterval);\n            }\n        },\n\n        pageChange() {\n            this.autoLoadIsActive = false;\n            clearInterval(this.reloadInterval);\n        },\n\n        getLinkParams(item) {\n            return {\n                id: item.id,\n                backPath: this.$route.name\n            };\n        },\n\n        async updateList(filterCriteria) {\n\n            const criteria = new Criteria(this.page, this.limit);\n            criteria.addFilter(Criteria.equals('parentId', null));\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC', false));\n            criteria.addAssociation('messages');\n            criteria.addAssociation('subJobs');\n\n            if (filterCriteria) {\n                filterCriteria.forEach(filter => {\n                    criteria.addFilter(filter);\n                });\n            }\n\n            if (this.jobTypes !== []) {\n                criteria.addFilter(Criteria.equalsAny('type', this.jobTypes));\n            }\n\n            return this.jobRepository.search(criteria, Shopware.Context.api).then(jobItems => {\n                this.jobItems = JobHelper.sortMessages(jobItems);\n            });\n        },\n\n        getMessagesCount(job, type) {\n            return job.messages.filter(function (item) {\n                return item.type === type + '-message';\n            }).length;\n        },\n\n        getChildrenCount(job, type) {\n            return job.subJobs.filter(function (item) {\n                return item.status === type;\n            }).length;\n        },\n\n        getList(filterCriteria) {\n            this.isLoading = true;\n            this.updateList(filterCriteria).then(() => {\n                this.isLoading = false\n            })\n        },\n\n        onRefresh(criteria) {\n            if (this.jobDisplayType === 'grouped') {\n                return this.$refs.jobGroups.onRefresh();\n            } else if (this.jobDisplayType === 'chart') {\n                return this.$refs.jobCharts.onRefresh();\n            }\n            return this.getList(criteria);\n        },\n\n        canDelete(item) {\n            return ['error', 'succeed'].indexOf(item.status) !== -1;\n        },\n\n        onDeleteJob(jobId) {\n            this.jobRepository.delete(jobId, Shopware.Context.api).then(() => {\n                this.updateList();\n            });\n        },\n\n        rescheduleJob(jobId) {\n            this.OdRescheduleService.rescheduleJob(jobId).then(() => {\n                this.createNotificationSuccess({\n                    message: \"Job has been rescheduled successfully.\",\n                });\n                this.updateList();\n            }).catch(() => {\n                this.createNotificationError({\n                    message: \"Unable reschedule job.\",\n                });\n            })\n        },\n\n        showSubJobs(jobId) {\n            this.currentJobID = jobId;\n            this.showJobSubsModal = true\n        },\n\n        showJobMessages(job) {\n            this.currentJobMessages = job.messages;\n            this.showMessagesModal = true\n        },\n\n        stopAutoLoading() {\n            this.autoLoadIsActive = false;\n            clearInterval(this.reloadInterval);\n\n        }\n    },\n\n    beforeDestroy() {\n        clearInterval(this.reloadInterval)\n    },\n});\n","export default \"{% block od_entity_listing_base %}\\n  <div class=\\\"od-entity-listing-wrapper\\\">\\n    <div class=\\\"od-job-listing-actions-bar\\\">\\n      <div class=\\\"action-item\\\">\\n        {% block od_scheduler_job_view_mode %}\\n          <sw-select-field v-model=\\\"jobDisplayType\\\" :label=\\\"$tc('job-listing.page.listing.index.display-mode')\\\">\\n            <option v-for=\\\"option in jobDisplayMode\\\" :value=\\\"option.value\\\">{{ option.name }}</option>\\n          </sw-select-field>\\n\\n          <sw-select-field v-if=\\\"jobDisplayType !== 'list'\\\" v-model=\\\"sortType\\\" :label=\\\"$tc('job-listing.page.listing.index.group-by')\\\">\\n              <option value=\\\"status\\\">{{ $tc('job-listing.page.listing.index.status') }}</option>\\n              <option value=\\\"type\\\">{{ $tc('job-listing.page.listing.index.job-type') }}</option>\\n          </sw-select-field>\\n\\n          <sw-datepicker\\n            :label=\\\"$tc('job-listing.page.listing.index.date-from')\\\"\\n            v-if=\\\"jobDisplayType == 'grouped'\\\"\\n            v-model=\\\"groupCreationDate.fromDate\\\"\\n          />\\n\\n          <sw-datepicker\\n            :label=\\\"$tc('job-listing.page.listing.index.date-to')\\\"\\n            v-if=\\\"jobDisplayType == 'grouped'\\\"\\n            v-model=\\\"groupCreationDate.toDate\\\"\\n          />\\n\\n        {% endblock %}\\n      </div>\\n      <div class=\\\"cation-item\\\">\\n        {% block od_scheduler_job_auto_load_switcher %}\\n          <sw-switch-field class=\\\"job-listing-auto-loading-switch\\\" v-model=\\\"autoLoadIsActive\\\"\\n                           :label=\\\"$tc('job-listing.page.listing.index.auto-load')\\\"></sw-switch-field>\\n        {% endblock %}\\n      </div>\\n    </div>\\n      \\n    <sw-container v-if=\\\"!jobItems\\\" columns=\\\"1fr 1fr\\\">\\n        <sw-loader size=\\\"50px\\\">\\n        </sw-loader>\\n    </sw-container>\\n\\n    {% block od_job_charts %}\\n      <od-scheduler-charts ref=\\\"jobCharts\\\"\\n                           v-if=\\\"jobDisplayType === 'chart'\\\"\\n                           :jobTypes=\\\"jobTypes\\\"\\n                           :sortType=\\\"sortType\\\"></od-scheduler-charts>\\n    {% endblock %}\\n\\n    {% block od_job_grouped_component %}\\n\\n      <od-grouped-view v-if=\\\"jobDisplayType === 'grouped'\\\"\\n                       ref=\\\"jobGroups\\\"\\n                       :groupCreationDate=\\\"groupCreationDate\\\"\\n                       :jobTypes=\\\"jobTypes\\\"\\n                       :sortType=\\\"sortType\\\">\\n      </od-grouped-view>\\n    {% endblock %}\\n\\n    {% block od_job_list_grid %}\\n      <od-entity-listing\\n              v-if=\\\"jobItems && jobDisplayType === 'list'\\\"\\n              :items=\\\"jobItems\\\"\\n              :repository=\\\"jobRepository\\\"\\n              :sort-by=\\\"currentSortBy\\\"\\n              :sort-direction=\\\"sortDirection\\\"\\n              :is-loading=\\\"isLoading\\\"\\n              :showSelection=\\\"true\\\"\\n              :allowColumnEdit=\\\"false\\\"\\n              :allowDelete=\\\"true\\\"\\n              :criteriaLimit=\\\"25\\\"\\n              :limit=\\\"25\\\"\\n              :allowEdit=\\\"false\\\"\\n              :jobTypes=\\\"jobTypes\\\"\\n              :isGroupedView=\\\"isGroupedView\\\"\\n              @page-change=\\\"pageChange\\\"\\n              :columns=\\\"columns\\\">\\n            {% block sw_data_grid_slot_pagination %}\\n                <sw-pagination\\n                    v-bind=\\\"{ page, limit, total }\\\"\\n                    :total-visible=\\\"6\\\"\\n                    @page-change=\\\"paginate\\\"\\n                />\\n            {% endblock %}\\n        <template #column-status=\\\"{ item }\\\">\\n          {% block od_job_list_grid_job_status_link %}\\n            <template>\\n              <od-job-status-badge :status=\\\"item.status\\\"></od-job-status-badge>\\n              {{ $tc('job-listing.page.listing.grid.job-status.' + item.status) }}\\n            </template>\\n          {% endblock %}\\n        </template>\\n        <template #column-name=\\\"{ item }\\\">\\n          {% block od_job_list_grid_job_name_link %}\\n            {{ item.name }}\\n          {% endblock %}\\n        </template>\\n        <template #column-startedAt=\\\"{ item }\\\">\\n          {% block od_job_list_grid_job_started_date %}\\n            {{ item.startedAt|date() }}\\n          {% endblock %}\\n        </template>\\n        <template #column-finishedAt=\\\"{ item }\\\">\\n          {% block od_job_list_grid_job_finished_date %}\\n            {{ item.finishedAt|date() }}\\n          {% endblock %}\\n        </template>\\n        <template #column-createdAt=\\\"{ item }\\\">\\n          {% block od_job_list_grid_job_created_date %}\\n            {{ item.createdAt|date() }}\\n          {% endblock %}\\n        </template>\\n        <template class=\\\"sub-jobs-column\\\" #column-subJobs=\\\"{ item }\\\">\\n          {% block od_job_list_grid_job_sub_jobs %}\\n            <div :class=\\\"item.subJobs.length > 0 ? 'has-subjobs' : ''\\\"\\n                 class=\\\"sub-jobs-counters-container jobs-info-counter\\\">\\n              <div class=\\\"count-container\\\" v-if=\\\"item.subJobs\\\">\\n                            <span class=\\\"info-container\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getChildrenCount(item, 'succeed')\\\"></span>\\n                            </span>\\n                <od-job-status-badge status=\\\"succeed\\\"></od-job-status-badge>\\n              </div>\\n\\n              <div class=\\\"count-container\\\" v-if=\\\"item.subJobs\\\">\\n                            <span class=\\\"warning-container\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getChildrenCount(item, 'pending')\\\"></span>\\n                            </span>\\n                <od-job-status-badge status=\\\"pending\\\"></od-job-status-badge>\\n              </div>\\n\\n              <div class=\\\"count-container\\\" v-if=\\\"item.subJobs\\\">\\n                            <span class=\\\"error-counter\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getChildrenCount(item, 'error')\\\"></span>\\n                            </span>\\n                <od-job-status-badge status=\\\"error\\\"></od-job-status-badge>\\n              </div>\\n            </div>\\n          {% endblock %}\\n          <sw-button v-if=\\\"item.subJobs.length > 0\\\"\\n                     class=\\\"sub-job-show-modal\\\"\\n                     size=\\\"small\\\"\\n                     variant=\\\"primary\\\"\\n                     :disabled=\\\"item.subJobs.length <= 0\\\"\\n                     @click=\\\"showSubJobs(item.id)\\\">\\n            <sw-icon name=\\\"regular-cog\\\" color=\\\"#fff\\\" :small=\\\"true\\\" :decorative=\\\"true\\\"></sw-icon>\\n              {{ $tc('job-listing.page.listing.index.show-sub-jobs') }}\\n          </sw-button>\\n        </template>\\n        <template #column-messages=\\\"{ item }\\\">\\n          {% block od_job_list_grid_job_messages %}\\n            <div :class=\\\"item.messages.length > 0 ? 'has-messages' : ''\\\"\\n                 class=\\\"message-counters-container jobs-info-counter\\\">\\n              <div class=\\\"count-container\\\" v-if=\\\"item.messages\\\">\\n                            <span class=\\\"info-counter\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getMessagesCount(item, 'info')\\\"></span>\\n                            </span>\\n                <sw-icon :small=\\\"true\\\" name=\\\"regular-info-circle\\\" color=\\\"#3498db\\\"></sw-icon>\\n              </div>\\n\\n              <div class=\\\"count-container\\\" v-if=\\\"item.messages\\\">\\n                            <span class=\\\"warning-counter\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getMessagesCount(item, 'warning')\\\"></span>\\n                            </span>\\n                <sw-icon :small=\\\"true\\\" name=\\\"regular-exclamation-triangle\\\" color=\\\"#f39c12\\\"></sw-icon>\\n              </div>\\n\\n              <div class=\\\"count-container\\\" v-if=\\\"item.messages\\\">\\n                            <span class=\\\"error-counter\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getMessagesCount(item, 'error')\\\"></span>\\n                            </span>\\n                <sw-icon :small=\\\"true\\\" name=\\\"regular-times-hexagon\\\" color=\\\"#c0392b\\\"></sw-icon>\\n              </div>\\n            </div>\\n            <sw-button v-if=\\\"item.messages.length > 0\\\"\\n                       class=\\\"job-messages-show-modal\\\"\\n                       size=\\\"small\\\"\\n                       variant=\\\"primary\\\"\\n                       :disabled=\\\"item.messages.length <= 0\\\"\\n                       @click=\\\"showJobMessages(item)\\\">\\n              <sw-icon name=\\\"regular-envelope\\\" color=\\\"#fff\\\" :small=\\\"true\\\" :decorative=\\\"true\\\"></sw-icon>\\n                {{ $tc('job-listing.page.listing.index.show-job-messages') }}\\n            </sw-button>\\n          {% endblock %}\\n        </template>\\n        <template #actions=\\\"{ item }\\\">\\n          <sw-context-menu-item :disabled=\\\"item.status !== 'error'\\\"\\n                                @click=\\\"rescheduleJob(item.id)\\\">\\n            {{ $tc('job-listing.actions.reschedule-job.button.label') }}\\n          </sw-context-menu-item>\\n          <sw-context-menu-item class=\\\"sw-context-menu-item--danger\\\"\\n                                :disabled=\\\"!canDelete(item)\\\"\\n                                @click=\\\"onDeleteJob(item.id)\\\">\\n            {{ $tc('job-listing.actions.delete-job.button.label') }}\\n          </sw-context-menu-item>\\n        </template>\\n      </od-entity-listing>\\n    {% endblock %}\\n\\n    {% block od_entity_listing_job_subs_modal %}\\n      <sw-modal class=\\\"od-job-sub-jobs-modal\\\" v-if=\\\"showJobSubsModal\\\" :title=\\\"$tc('job-listing.page.listing.grid.column.child-jobs')\\\"\\n                @modal-close=\\\"showJobSubsModal = false\\\">\\n        <od-job-sub-jobs v-if=\\\"currentJobID\\\" :jobId=\\\"currentJobID\\\">\\n\\n        </od-job-sub-jobs>\\n        <template #modal-footer>\\n          <sw-button variant=\\\"primary\\\"\\n                     @click=\\\"showJobSubsModal = false\\\">\\n              {{ $tc('job-listing.page.listing.index.close') }}\\n          </sw-button>\\n        </template>\\n      </sw-modal>\\n    {% endblock %}\\n\\n    {% block od_entity_listing_job_messages_modal %}\\n      <sw-modal class=\\\"od-job-messages-modal\\\" v-if=\\\"showMessagesModal\\\"\\n                :title=\\\"$tc('job-listing.page.listing.grid.column.messages')\\\"\\n                @modal-close=\\\"showMessagesModal = false\\\">\\n        {% block job_messages_listing %}\\n          <div v-if=\\\"currentJobMessages\\\" class=\\\"job_list_grid_job_messages-information\\\" style=\\\"width:100%;\\\">\\n            <div class=\\\"messages-content\\\" v-for=\\\"item in currentJobMessages\\\">\\n              <sw-alert class=\\\"od-alert\\\"\\n                        v-if=\\\"item.type == 'info-message'\\\"\\n                        variant=\\\"info\\\"\\n                        appearance=\\\"default\\\"\\n                        :showIcon=\\\"true\\\"\\n                        :closable=\\\"false\\\">\\n                {{ item.message }}\\n              </sw-alert>\\n              <sw-alert class=\\\"od-alert\\\"\\n                        v-if=\\\"item.type == 'error-message'\\\"\\n                        variant=\\\"error\\\"\\n                        appearance=\\\"default\\\"\\n                        :showIcon=\\\"true\\\"\\n                        :closable=\\\"false\\\">\\n                {{ item.message }}\\n              </sw-alert>\\n              <sw-alert class=\\\"od-alert\\\"\\n                        v-if=\\\"item.type == 'warning-message'\\\"\\n                        variant=\\\"warning\\\"\\n                        appearance=\\\"default\\\"\\n                        :showIcon=\\\"true\\\"\\n                        :closable=\\\"false\\\">\\n                {{ item.message }}\\n              </sw-alert>\\n            </div>\\n          </div>\\n        {% endblock %}\\n        <template #modal-footer>\\n          <sw-button variant=\\\"primary\\\"\\n                     @click=\\\"showMessagesModal = false\\\">\\n              {{ $tc('job-listing.page.listing.index.close') }}\\n          </sw-button>\\n        </template>\\n      </sw-modal>\\n    {% endblock %}\\n  </div>\\n{% endblock %}\\n\";","import './page/od-job-listing-index';\n\nimport enGB from './snippet/en-GB.json';\nimport deDE from './snippet/de-DE.json';\n\nconst {Module} = Shopware;\n\nModule.register('od-job-listing', {\n    type: 'plugin',\n    title: 'job-listing.general.title',\n    description: 'job-listing.general.description',\n    color: '#F88962',\n    icon: 'default-avatar-multiple',\n\n    snippets: {\n        'en-GB': enGB,\n        'de-DE': deDE\n    },\n\n    routes: {\n        detail: {\n            path: 'detail/:id/back/:backPath',\n            props: {\n                default: ($route) => {\n                    return { jobId: $route.params.id };\n                },\n            },\n        }\n    },\n})\n","const ApiService = Shopware.Classes.ApiService;\n\nclass OdRescheduleService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'od-job') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    rescheduleJob(jobId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/reschedule`,\n                {\n                    params: { jobId },\n                    headers: headers,\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nexport default OdRescheduleService;\n","import OdRescheduleService\n    from '../service/api/od-reschedule.service';\nconst { Application } = Shopware;\nconst initContainer = Application.getContainer('init');\n\nApplication.addServiceProvider(\n    'OdRescheduleService',\n    (container) => new OdRescheduleService(initContainer.httpClient, container.loginService),\n);\n","export default \"{% block od_job_info_base %}\\n    <sw-card-section v-if=\\\"jobItem\\\">\\n        {% block job_info_overview_columns %}\\n            <sw-container\\n                    columns=\\\"repeat(auto-fit, minmax(250px, 1fr))\\\"\\n                    gap=\\\"30px 30px\\\">\\n                {% block job_info_overview_left_column %}\\n                    <sw-description-list\\n                            columns=\\\"1fr\\\"\\n                            grid=\\\"1fr\\\">\\n                        {% block job_info_overview_name %}\\n                            <dt>{{ $tc('job-listing.page.listing.grid.column.name') }}</dt>\\n                            <dd>\\n                                <sw-order-inline-field v-if=\\\"jobItem.name\\\"\\n                                                       :display-value=\\\"jobItem.name\\\"\\n                                                       :value=\\\"jobItem.name\\\"\\n                                                       :editable=\\\"false\\\"\\n                                />\\n                            </dd>\\n                        {% endblock %}\\n                        {% block job_info_overview_status %}\\n                            <dt>{{ $tc('job-listing.page.listing.grid.column.status') }}</dt>\\n                            <dd>\\n                                <template>\\n                                    <od-job-status-badge :status=\\\"jobItem.status\\\">\\n                                    </od-job-status-badge>\\n                                    {{ $tc('job-listing.page.listing.grid.job-status.' + jobItem.status) }}\\n                                </template>\\n                            </dd>\\n                        {% endblock %}\\n                        {% block job_info_overview_startedAt %}\\n                            <dt>{{ $tc('job-listing.page.listing.grid.column.started-at') }}</dt>\\n                            <dd>\\n                                <sw-order-inline-field v-if=\\\"jobItem.startedAt\\\"\\n                                                       :display-value=\\\"jobItem.startedAt|date()\\\"\\n                                                       :value=\\\"jobItem.startedAt|date()\\\"\\n                                                       :editable=\\\"false\\\"\\n                                />\\n                            </dd>\\n                        {% endblock %}\\n                    </sw-description-list>\\n                {% endblock %}\\n                {% block od_job_info_overview_right_column %}\\n                    <sw-description-list\\n                            columns=\\\"1fr\\\"\\n                            grid=\\\"1fr\\\" class=\\\"od-job-user-card__summary-vertical\\\">\\n                        {% block job_detail_base_overview_type %}\\n                            <dt>{{ $tc('job-listing.page.listing.grid.column.type') }}</dt>\\n                            <dd>\\n                                <sw-order-inline-field v-if=\\\"jobItem.type\\\"\\n                                                       :display-value=\\\"jobItem.type\\\"\\n                                                       :value=\\\"jobItem.type\\\"\\n                                                       :editable=\\\"false\\\"\\n                                />\\n                            </dd>\\n                        {% endblock %}\\n                        {% block job_info_overview_createdAt %}\\n                            <dt>{{ $tc('job-listing.page.listing.grid.column.created-at') }}</dt>\\n                            <dd>\\n                                <sw-order-inline-field v-if=\\\"jobItem.createdAt\\\"\\n                                                       :display-value=\\\"jobItem.createdAt|date()\\\"\\n                                                       :value=\\\"jobItem.startedAt|date()\\\"\\n                                                       :editable=\\\"false\\\"/>\\n                            </dd>\\n                        {% endblock %}\\n                        {% block job_info_overview_finishedAt %}\\n                            <dt>{{ $tc('job-listing.page.listing.grid.column.finished-at') }}</dt>\\n                            <dd>\\n                                <sw-order-inline-field v-if=\\\"jobItem.finishedAt\\\"\\n                                                       :display-value=\\\"jobItem.finishedAt|date()\\\"\\n                                                       :value=\\\"jobItem.finishedAt|date()\\\"\\n                                                       :editable=\\\"false\\\"/>\\n                            </dd>\\n                        {% endblock %}\\n                    </sw-description-list>\\n                {% endblock %}\\n            </sw-container>\\n        {% endblock %}\\n    </sw-card-section>\\n{% endblock %}\";","import template from './od-job-info.html.twig';\n\nconst {Component} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('od-job-info', {\n    template,\n\n    inject: [\n        'OdRescheduleService',\n        'repositoryFactory'\n    ],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        jobId: {\n            type: String,\n            required: false,\n            default: null,\n        }\n    },\n\n    data() {\n        return {\n            jobItem: null\n        }\n    },\n\n    computed: {\n        jobRepository() {\n            return this.repositoryFactory.create('od_scheduler_job');\n        }\n    },\n\n    created() {\n        this.initPageData();\n    },\n\n    methods: {\n        initPageData() {\n            this.jobRepository.get(this.jobId, Shopware.Context.api, new Criteria()).then(jobItem => {\n                this.jobItem = jobItem;\n            });\n        },\n    }\n});\n","export default \"{% block od_job_sub_jobs_base %}\\n    <div class=\\\"sub-jobs-container\\\">\\n        <div class=\\\"sub-job-container\\\" v-if=\\\"subJobs\\\">\\n            {% block job_children_listing %}\\n                <od-entity-listing\\n                        v-if=\\\"subJobs\\\"\\n                        :items=\\\"subJobs\\\"\\n                        :data-source=\\\"subJobs\\\"\\n                        :repository=\\\"jobRepository\\\"\\n                        :showSelection=\\\"false\\\"\\n                        :allowColumnEdit=\\\"false\\\"\\n                        :compactMode=\\\"false\\\"\\n                        :allowDelete=\\\"false\\\"\\n                        :allowEdit=\\\"false\\\"\\n                        :columns=\\\"jobChildrenColumns\\\">\\n                    <template #column-name=\\\"{ item }\\\">\\n                        {% block job_list_grid_job_name_link %}\\n                            {{ item.name }}\\n                        {% endblock %}\\n                    </template>\\n                    <template #column-status=\\\"{ item }\\\">\\n                        {% block job_list_grid_job_status_link %}\\n                            <template>\\n                                <od-job-status-badge :status=\\\"item.status\\\"></od-job-status-badge>\\n                                {{ $tc('job-listing.page.listing.grid.job-status.' + item.status) }}\\n                            </template>\\n                        {% endblock %}\\n                    </template>\\n\\n                    <template #column-startedAt=\\\"{ item }\\\">\\n                        {% block job_list_grid_job_started_at %}\\n                            {{ item.startedAt|date() }}\\n                        {% endblock %}\\n                    </template>\\n                    <template #column-finishedAt=\\\"{ item }\\\">\\n                        {% block job_list_grid_job_finished_at %}\\n                            {{ item.finishedAt|date() }}\\n                        {% endblock %}\\n                    </template>\\n                    <template #column-createdAt=\\\"{ item }\\\">\\n                        {% block job_list_grid_job_created_at %}\\n                            {{ item.createdAt|date() }}\\n                        {% endblock %}\\n                    </template>\\n                    <template #column-messages=\\\"{ item }\\\">\\n                        {% block sub_job_show_messages_button %}\\n                            <div :class=\\\"item.messages.length > 0 ? 'has-messages' : ''\\\" class=\\\"message-counters-container jobs-info-counter\\\">\\n                                <div class=\\\"count-container\\\" v-if=\\\"item.messages\\\">\\n                            <span class=\\\"info-counter\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getMessagesCount(item, 'info')\\\"></span>\\n                            </span>\\n                                    <sw-icon :small=\\\"true\\\" name=\\\"regular-info-circle\\\" color=\\\"#3498db\\\"></sw-icon>\\n                                </div>\\n\\n                                <div class=\\\"count-container\\\" v-if=\\\"item.messages\\\">\\n                            <span class=\\\"warning-counter\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getMessagesCount(item, 'warning')\\\"></span>\\n                            </span>\\n                                    <sw-icon :small=\\\"true\\\" name=\\\"regular-exclamation-triangle\\\" color=\\\"#f39c12\\\"></sw-icon>\\n                                </div>\\n\\n                                <div class=\\\"count-container\\\" v-if=\\\"item.messages\\\">\\n                            <span class=\\\"error-counter\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getMessagesCount(item, 'error')\\\"></span>\\n                            </span>\\n                                    <sw-icon :small=\\\"true\\\" name=\\\"regular-times-hexagon\\\" color=\\\"#c0392b\\\"></sw-icon>\\n                                </div>\\n                            </div>\\n                            <sw-button v-if=\\\"item.messages.length > 0\\\"\\n                                       class=\\\"job-messages-show-modal\\\"\\n                                       size=\\\"small\\\"\\n                                       variant=\\\"primary\\\"\\n                                       :disabled=\\\"item.messages.length <= 0\\\"\\n                                       @click=\\\"showMessageModal(item.messages)\\\">\\n                                <sw-icon name=\\\"regular-envelope\\\" color=\\\"#fff\\\" :small=\\\"true\\\" :decorative=\\\"true\\\"></sw-icon>\\n                                {{ $tc('job-listing.actions.show-messages.button.label') }}\\n                            </sw-button>\\n                        {% endblock %}\\n                    </template>\\n                    <template #actions=\\\"{ item }\\\">\\n                        <sw-context-menu-item :disabled=\\\"item.status !== 'error'\\\"\\n                                              @click=\\\"rescheduleJob(item.id)\\\">\\n                            {{ $tc('job-listing.actions.reschedule-job.button.label') }}\\n                        </sw-context-menu-item>\\n                        <sw-context-menu-item v-if=\\\"item.messages\\\"\\n                                              :disabled=\\\"item.messages.length <= 0\\\"\\n                                              @click=\\\"showMessageModal(item.messages)\\\">\\n                            {{ $tc('job-listing.actions.show-messages.button.label') }}\\n                        </sw-context-menu-item>\\n                    </template>\\n                </od-entity-listing>\\n            {% endblock %}\\n        </div>\\n        <div v-else>\\n            {{ $tc('job-listing.page.listing.index.loading') }}\\n        </div>\\n        <sw-modal class=\\\"od-job-messages-modal\\\" v-if=\\\"showMessagesModal\\\" :title=\\\"$tc('job-listing.page.listing.grid.column.messages')\\\"\\n                  @modal-close=\\\"showMessagesModal = false\\\">\\n            {% block job_messages_listing %}\\n                <div v-if=\\\"currentJobMessages\\\" class=\\\"job_list_grid_job_messages-information\\\" style=\\\"width:100%;\\\">\\n                    <div class=\\\"messages-content\\\" v-for=\\\"item in currentJobMessages\\\">\\n                        <sw-alert class=\\\"od-alert\\\"\\n                                v-if=\\\"item.type == 'info-message'\\\"\\n                                variant=\\\"info\\\"\\n                                appearance=\\\"default\\\"\\n                                :showIcon=\\\"true\\\"\\n                                :closable=\\\"false\\\">\\n                            {{ item.message }}\\n                        </sw-alert>\\n                        <sw-alert class=\\\"od-alert\\\"\\n                                v-if=\\\"item.type == 'error-message'\\\"\\n                                variant=\\\"error\\\"\\n                                appearance=\\\"default\\\"\\n                                :showIcon=\\\"true\\\"\\n                                :closable=\\\"false\\\">\\n                            {{ item.message }}\\n                        </sw-alert>\\n                        <sw-alert class=\\\"od-alert\\\"\\n                                v-if=\\\"item.type == 'warning-message'\\\"\\n                                variant=\\\"warning\\\"\\n                                appearance=\\\"default\\\"\\n                                :showIcon=\\\"true\\\"\\n                                :closable=\\\"false\\\">\\n                            {{ item.message }}\\n                        </sw-alert>\\n                    </div>\\n                </div>\\n            {% endblock %}\\n            <template #modal-footer>\\n                <sw-button variant=\\\"primary\\\"\\n                           @click=\\\"showMessagesModal = false\\\">\\n                    {{ $tc('job-listing.page.listing.index.close') }}\\n                </sw-button>\\n            </template>\\n        </sw-modal>\\n    </div>\\n{% endblock %}\\n\";","import template from './od-job-sub-jobs.html.twig';\nimport JobHelper from \"../../util/job.helper\";\nimport './od-job-sub-jobs.scss';\n\nconst {Component} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('od-job-sub-jobs', {\n    template,\n\n    inject: [\n        'OdRescheduleService',\n        'repositoryFactory'\n    ],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        jobId: {\n            type: String,\n            required: false,\n            default: null,\n        }\n    },\n\n    data() {\n        return {\n            subJobs: null,\n            showMessagesModal: false,\n            currentJobMessages: null\n        }\n    },\n\n    computed: {\n        jobRepository() {\n            return this.repositoryFactory.create('od_scheduler_job');\n        },\n\n        jobChildrenColumns() {\n            return [\n                {\n                    property: 'name',\n                    dataIndex: 'name',\n                    label: this.$tc('job-listing.page.listing.grid.column.name'),\n                    allowResize: false,\n                    inlineEdit: true,\n                    width: '200px'\n                },\n                {\n                    property: 'status',\n                    dataIndex: 'status',\n                    label: this.$tc('job-listing.page.listing.grid.column.status'),\n                    allowResize: false,\n                    inlineEdit: true,\n                    width: '100px'\n                },\n                {\n                    property: 'startedAt',\n                    dataIndex: 'startedAt',\n                    label: this.$tc('job-listing.page.listing.grid.column.started-at'),\n                    allowResize: false,\n                    inlineEdit: true,\n                    width: '150px',\n                    sortable: true\n                },\n                {\n                    property: 'finishedAt',\n                    dataIndex: 'finishedAt',\n                    label: this.$tc('job-listing.page.listing.grid.column.finished-at'),\n                    allowResize: true,\n                    inlineEdit: true,\n                    width: '150px'\n                },\n                {\n                    property: 'createdAt',\n                    dataIndex: 'createdAt',\n                    label: this.$tc('job-listing.page.listing.grid.column.created-at'),\n                    allowResize: true,\n                    inlineEdit: true,\n                    width: '150px'\n                },\n                {\n                    property: 'messages',\n                    dataIndex: 'messages',\n                    label: 'Messages',\n                    allowResize: true,\n                    inlineEdit: false,\n                    width: '250px',\n                    sortable: false\n                },\n            ];\n        },\n    },\n\n    created() {\n        this.initModalData();\n    },\n\n    methods: {\n        initModalData() {\n            const criteria = new Criteria();\n            criteria.addFilter(Criteria.equals('parentId', this.jobId));\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC', false));\n            criteria.addAssociation('messages');\n            this.jobRepository.search(criteria, Shopware.Context.api).then(jobItems => {\n                this.subJobs = JobHelper.sortMessages(jobItems);\n            });\n        },\n\n        rescheduleJob(jobId) {\n            this.OdRescheduleService.rescheduleJob(jobId).then(() => {\n                this.createNotificationSuccess({\n                    message: \"Job has been rescheduled successfully.\",\n                });\n                this.initPageData();\n            }).catch(() => {\n                this.createNotificationError({\n                    message: \"Unable reschedule job.\",\n                });\n            })\n        },\n\n        showMessageModal(messages) {\n            this.currentJobMessages = messages;\n            this.showMessagesModal = true;\n        },\n\n        getMessagesCount(job, type) {\n            return job.messages.filter(function (item) {\n                return item.type === type + '-message';\n            }).length;\n        },\n    }\n});\n","import template from './od-scheduler-charts.html.twig';\nimport './od-scheduler-charts.scss';\n\nconst {Component} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('od-scheduler-charts', {\n    template,\n\n    inject: [\n        'repositoryFactory'\n    ],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        jobTypes: {\n            type: Array,\n            required: false,\n            default: () => []\n        },\n\n        sortType: {\n            type: String,\n            required: true,\n            default: () => 'status'\n        }\n    },\n\n    data() {\n        return {\n            items: null,\n            statisticDateRanges: {\n                value: '30Days',\n                options: {\n                    '30Days': 30,\n                    '14Days': 14,\n                    '7Days': 7,\n                    '24Hours': 24,\n                    yesterday: 1,\n                },\n            },\n            chartSeries: [],\n            colors: {\n                0: '#FF8C00',\n                1: '#0044ee',\n                2: '#9400D3',\n                3: '#FFD700',\n                4: '#008000',\n                5: '#40E0D0',\n                6: '#00BFFF',\n                7: '#209d90',\n                8: '#C71585',\n                9: '#000000',\n                10: '#F4A460'\n            }\n        }\n    },\n\n    computed: {\n        jobRepository() {\n            return this.repositoryFactory.create('od_scheduler_job');\n        },\n\n        getTimeUnitInterval() {\n            const statisticDateRange = this.statisticDateRanges.value;\n\n            if (statisticDateRange === 'yesterday' || statisticDateRange === '24Hours') {\n                return 'hour';\n            }\n\n            return 'day';\n        },\n\n        dateAgo() {\n            const date = new Date();\n            const selectedDateRange = this.statisticDateRanges.value;\n            const dateRange = this.statisticDateRanges.options[selectedDateRange] ?? 0;\n\n            if (selectedDateRange === '24Hours') {\n                date.setHours(date.getHours() - dateRange);\n\n                return date;\n            }\n\n            date.setDate(date.getDate() - dateRange);\n            date.setHours(0, 0, 0, 0);\n\n            return date;\n        },\n\n        chartOptionsCount() {\n            return {\n                title: {\n                    text: 'Jobs',\n                    style: {\n                        fontSize: '16px',\n                        fontWeight: '600',\n                    },\n                },\n                xaxis: {\n                    type: 'datetime',\n                    min: this.dateAgo.getTime(),\n                    labels: {\n                        datetimeUTC: false,\n                    },\n                },\n                yaxis: {\n                    min: 0,\n                    tickAmount: 3,\n                    labels: {\n                        formatter: (value) => {\n                            return parseInt(value, 10);\n                        },\n                    },\n                },\n            };\n        },\n    },\n\n    watch: {\n        sortType() {\n            this.initChartData();\n        }\n    },\n\n    created() {\n        this.initChartData();\n    },\n\n    methods: {\n        initChartData() {\n            const criteria = new Criteria();\n            criteria.addFilter(Criteria.equals('parentId', null));\n            criteria.setLimit(999999);\n\n            if (this.jobTypes !== []) {\n                criteria.addFilter(Criteria.equalsAny('type', this.jobTypes));\n            }\n\n            return this.jobRepository.search(criteria, Shopware.Context.api).then(items => {\n                this.items = items;\n                if (this.sortType === 'status') {\n                    this.createStatusChartSeries(items);\n                } else if (this.sortType === 'type') {\n                    this.createTypeChartSeries(items);\n                }\n            });\n        },\n\n        createTypeChartSeries(items) {\n            this.chartSeries = this.typeCharts(items);\n\n            for (const item of items) {\n                let date = this.parseDate(item.createdAt);\n\n                this.chartSeries.forEach((chart) => {\n                    if (chart.name === item.name) {\n                        let existingIndex = chart.data.findIndex(e => e.x === date);\n                        if (existingIndex !== -1) {\n                            chart.data[existingIndex].y = chart.data[existingIndex].y + 1;\n                        } else {\n                            chart.data.push({\n                                x: date,\n                                y: 1\n                            })\n                        }\n                    }\n                })\n            }\n        },\n\n        createStatusChartSeries(items) {\n            this.chartSeries = this.statusCharts()\n\n            for (const item of items) {\n                let date = this.parseDate(item.createdAt)\n\n                if (item.status === 'succeed') {\n                    let successData = this.chartSeries[0].data\n                    let existingIndex = successData.findIndex(e => e.x === date);\n\n                    if (existingIndex !== -1) {\n                        successData[existingIndex].y = successData[existingIndex].y + 1;\n                    } else {\n                        successData.push({\n                            x: date,\n                            y: 1\n                        })\n                    }\n                } else if (item.status === 'pending') {\n                    let pendingData = this.chartSeries[2].data\n                    let existingIndex = pendingData.findIndex(e => e.x === date);\n\n                    if (existingIndex !== -1) {\n                        pendingData[existingIndex].y = pendingData[existingIndex].y + 1;\n                    } else {\n                        pendingData.push({\n                            x: date,\n                            y: 1\n                        })\n                    }\n                } else if (item.status === 'error') {\n                    let errorData = this.chartSeries[1].data\n                    let existingIndex = errorData.findIndex(e => e.x === date);\n\n                    if (existingIndex !== -1) {\n                        errorData[existingIndex].y = errorData[existingIndex].y + 1;\n                    } else {\n                        errorData.push({\n                            x: date,\n                            y: 1\n                        })\n                    }\n                }\n            }\n        },\n\n        getRandomColor() {\n            let n = (Math.random() * 0xfffff * 1000000).toString(16);\n            return '#' + n.slice(0, 6);\n        },\n\n        typeCharts(items) {\n            let chartSeries = [];\n\n            items.forEach((item, index) => {\n\n                let type = chartSeries.find((chart) => {\n                   return chart.name === item.name\n                })\n\n                if (!type) {\n                    chartSeries.push({\n                        name: item.name,\n                        data: [],\n                        color: this.colors[index] ? this.colors[index] : this.getRandomColor(index)\n                    })\n                }\n            })\n\n\n            return chartSeries;\n        },\n\n        statusCharts() {\n            return [\n                {\n                    name: this.$tc('job-listing.page.listing.grid.job-status.succeed'),\n                    data: [],\n                    color: '#37d046'\n                },\n                {\n                    name: this.$tc('job-listing.page.listing.grid.job-status.error'),\n                    data: [],\n                    color: '#de294c'\n                },\n                {\n                    name: this.$tc('job-listing.page.listing.grid.job-status.pending'),\n                    data: [],\n                    color: '#d1d9e0'\n                }\n            ]\n        },\n\n        parseDate(date) {\n            date = date.substring(0, date.lastIndexOf('T') + 1);\n            const parsedDate = new Date(date.replace(/-/g, '/').replace('T', ' '));\n            return parsedDate.valueOf();\n        },\n\n        onRefresh() {\n            this.initChartData();\n        },\n    },\n\n    beforeDestroy() {\n        clearInterval(this.reloadInterval)\n    },\n});\n","export default \"{% block od_job_charts_base %}\\n<div class=\\\"od-scheduler-charts\\\">\\n    <div class=\\\"sw-dashboard-statistics__card-headline-select\\\">\\n        <sw-select-field\\n                class=\\\"charts-date-range\\\"\\n                v-model=\\\"statisticDateRanges.value\\\"\\n                size=\\\"small\\\">\\n            <option\\n                    v-for=\\\"(value, option) in statisticDateRanges.options\\\"\\n                    :key=\\\"option\\\"\\n                    :value=\\\"option\\\">\\n                {{ $tc(`sw-dashboard.monthStats.dateRanges.${option}`) }}\\n            </option>\\n        </sw-select-field>\\n    </div>\\n    <sw-chart\\n            type=\\\"area\\\"\\n            :series=\\\"chartSeries\\\"\\n            :options=\\\"chartOptionsCount\\\"\\n            :fill-empty-values=\\\"getTimeUnitInterval\\\"\\n            :fillEmptyDates=\\\"false\\\"\\n            :sort=\\\"true\\\"\\n    />\\n</div>\\n{% endblock %}\";","export default \"{% block od_grouped_view_base %}\\n    <div class=\\\"od-grouped-view-container\\\" v-if=\\\"groupedItems\\\" :isLoading=\\\"isLoading\\\">\\n        <div class=\\\"od-grouped-view-wrapper\\\"\\n             v-for=\\\"group in groupedItems\\\">\\n            <sw-collapse :class=\\\"`is-${group.type}`\\\">\\n                <template #header>{{ group.title }} <span class=\\\"amount\\\">({{ group.items.total }})</span></template>\\n                <template #content>\\n                    <od-entity-listing\\n                            :items=\\\"group.items\\\"\\n                            :repository=\\\"jobRepository\\\"\\n                            :is-loading=\\\"isLoading\\\"\\n                            :showSelection=\\\"true\\\"\\n                            :allowColumnEdit=\\\"false\\\"\\n                            :allowDelete=\\\"true\\\"\\n                            :allowEdit=\\\"false\\\"\\n                            :page=\\\"1\\\"\\n                            :jobTypes=\\\"jobTypes\\\"\\n                            :columns=\\\"columns\\\">\\n                        <template #column-status=\\\"{ item }\\\">\\n                            {% block od_job_list_grid_job_status_link %}\\n                                <template>\\n                                    <od-job-status-badge :status=\\\"item.status\\\"></od-job-status-badge>\\n                                    {{ $tc('job-listing.page.listing.grid.job-status.' + item.status) }}\\n                                </template>\\n                            {% endblock %}\\n                        </template>\\n                        <template #column-name=\\\"{ item }\\\">\\n                            {% block od_job_list_grid_job_name_link %}\\n                                {{ item.name }}\\n                            {% endblock %}\\n                        </template>\\n                        <template #column-startedAt=\\\"{ item }\\\">\\n                            {% block od_job_list_grid_job_started_date %}\\n                                {{ item.startedAt|date() }}\\n                            {% endblock %}\\n                        </template>\\n                        <template #column-finishedAt=\\\"{ item }\\\">\\n                            {% block od_job_list_grid_job_finished_date %}\\n                                {{ item.finishedAt|date() }}\\n                            {% endblock %}\\n                        </template>\\n                        <template #column-createdAt=\\\"{ item }\\\">\\n                            {% block od_job_list_grid_job_created_date %}\\n                                {{ item.createdAt|date() }}\\n                            {% endblock %}\\n                        </template>\\n                        <template class=\\\"sub-jobs-column\\\" #column-subJobs=\\\"{ item }\\\">\\n                            {% block od_job_list_grid_job_sub_jobs %}\\n                                <div :class=\\\"item.subJobs.length > 0 ? 'has-subjobs' : ''\\\"\\n                                     class=\\\"sub-jobs-counters-container jobs-info-counter\\\">\\n                                    <div class=\\\"count-container\\\" v-if=\\\"item.subJobs\\\">\\n                            <span class=\\\"info-container\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getChildrenCount(item, 'succeed')\\\"></span>\\n                            </span>\\n                                        <od-job-status-badge status=\\\"succeed\\\"></od-job-status-badge>\\n                                    </div>\\n\\n                                    <div class=\\\"count-container\\\" v-if=\\\"item.subJobs\\\">\\n                            <span class=\\\"warning-container\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getChildrenCount(item, 'pending')\\\"></span>\\n                            </span>\\n                                        <od-job-status-badge status=\\\"pending\\\"></od-job-status-badge>\\n                                    </div>\\n\\n                                    <div class=\\\"count-container\\\" v-if=\\\"item.subJobs\\\">\\n                            <span class=\\\"error-counter\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getChildrenCount(item, 'error')\\\"></span>\\n                            </span>\\n                                        <od-job-status-badge status=\\\"error\\\"></od-job-status-badge>\\n                                    </div>\\n                                </div>\\n                            {% endblock %}\\n                            <sw-button v-if=\\\"item.subJobs.length > 0\\\" class=\\\"sub-job-show-modal\\\" size=\\\"small\\\" variant=\\\"primary\\\"\\n                                       :disabled=\\\"item.subJobs.length <= 0\\\" @click=\\\"showSubJobs(item.id)\\\">\\n                                <sw-icon name=\\\"regular-cog\\\" color=\\\"#fff\\\" :small=\\\"true\\\" :decorative=\\\"true\\\"></sw-icon>\\n                                {{ $tc('job-listing.page.listing.grid.column.show-sub-jobs') }}\\n                            </sw-button>\\n                        </template>\\n                        <template #column-messages=\\\"{ item }\\\">\\n                            {% block od_job_list_grid_job_messages %}\\n                                <div :class=\\\"item.messages.length > 0 ? 'has-messages' : ''\\\"\\n                                     class=\\\"message-counters-container jobs-info-counter\\\">\\n                                    <div class=\\\"count-container\\\" v-if=\\\"item.messages\\\">\\n                            <span class=\\\"info-counter\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getMessagesCount(item, 'info')\\\"></span>\\n                            </span>\\n                                        <sw-icon :small=\\\"true\\\" name=\\\"regular-info-circle\\\" color=\\\"#3498db\\\"></sw-icon>\\n                                    </div>\\n\\n                                    <div class=\\\"count-container\\\" v-if=\\\"item.messages\\\">\\n                            <span class=\\\"warning-counter\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getMessagesCount(item, 'warning')\\\"></span>\\n                            </span>\\n                                        <sw-icon :small=\\\"true\\\" name=\\\"regular-exclamation-triangle\\\" color=\\\"#f39c12\\\"></sw-icon>\\n                                    </div>\\n\\n                                    <div class=\\\"count-container\\\" v-if=\\\"item.messages\\\">\\n                            <span class=\\\"error-counter\\\">\\n                                <span class=\\\"count\\\" v-html=\\\"getMessagesCount(item, 'error')\\\"></span>\\n                            </span>\\n                                        <sw-icon :small=\\\"true\\\" name=\\\"regular-times-hexagon\\\" color=\\\"#c0392b\\\"></sw-icon>\\n                                    </div>\\n                                </div>\\n                                <sw-button v-if=\\\"item.messages.length > 0\\\" class=\\\"job-messages-show-modal\\\" size=\\\"small\\\"\\n                                           variant=\\\"primary\\\" :disabled=\\\"item.messages.length <= 0\\\"\\n                                           @click=\\\"showJobMessages(item)\\\">\\n                                    <sw-icon name=\\\"regular-envelope\\\" color=\\\"#fff\\\" :small=\\\"true\\\"\\n                                             :decorative=\\\"true\\\"></sw-icon>\\n                                    Show job messages\\n                                </sw-button>\\n                            {% endblock %}\\n                        </template>\\n                        <template #actions=\\\"{ item }\\\">\\n                            <sw-context-menu-item :disabled=\\\"item.status !== 'error'\\\"\\n                                                  @click=\\\"rescheduleJob(item.id)\\\">\\n                                {{ $tc('job-listing.actions.reschedule-job.button.label') }}\\n                            </sw-context-menu-item>\\n                            <sw-context-menu-item class=\\\"sw-context-menu-item--danger\\\"\\n                                                  :disabled=\\\"!canDelete(item)\\\"\\n                                                  @click=\\\"onDeleteJob(item.id)\\\">\\n                                {{ $tc('job-listing.actions.delete-job.button.label') }}\\n                            </sw-context-menu-item>\\n                        </template>\\n                    </od-entity-listing>\\n                </template>\\n            </sw-collapse>\\n        </div>\\n        {% block od_entity_listing_job_info_modal %}\\n            <sw-modal class=\\\"od-job-info-modal\\\" v-if=\\\"showJobInfoModal\\\" :title=\\\"$tc('job-listing.page.listing.grouped-view.job-info')\\\"\\n                      @modal-close=\\\"showJobInfoModal = false\\\">\\n                <od-job-info v-if=\\\"currentJobID\\\" :jobId=\\\"currentJobID\\\">\\n\\n                </od-job-info>\\n                <template #modal-footer>\\n                    <sw-button variant=\\\"primary\\\"\\n                               @click=\\\"showJobInfoModal = false\\\">\\n                        {{ $tc('job-listing.page.listing.index.close') }}\\n                    </sw-button>\\n                </template>\\n            </sw-modal>\\n        {% endblock %}\\n\\n        {% block od_entity_listing_job_subs_modal %}\\n            <sw-modal class=\\\"od-job-sub-jobs-modal\\\" v-if=\\\"showJobSubsModal\\\" :title=\\\"$tc('job-listing.page.listing.grouped-view.sub-jobs')\\\"\\n                      @modal-close=\\\"showJobSubsModal = false\\\">\\n                <od-job-sub-jobs v-if=\\\"currentJobID\\\" :jobId=\\\"currentJobID\\\">\\n\\n                </od-job-sub-jobs>\\n                <template #modal-footer>\\n                    <sw-button variant=\\\"primary\\\"\\n                               @click=\\\"showJobSubsModal = false\\\">\\n                        {{ $tc('job-listing.page.listing.index.close') }}\\n                    </sw-button>\\n                </template>\\n            </sw-modal>\\n        {% endblock %}\\n\\n        {% block od_entity_listing_job_messages_modal %}\\n            <sw-modal class=\\\"od-job-messages-modal\\\" v-if=\\\"showMessagesModal\\\" :title=\\\"$tc('job-listing.page.listing.grouped-view.job-messages')\\\"\\n                      @modal-close=\\\"showMessagesModal = false\\\">\\n                {% block job_messages_listing %}\\n                    <sw-data-grid\\n                            v-if=\\\"currentJobMessages\\\"\\n                            :items=\\\"currentJobMessages\\\"\\n                            :data-source=\\\"currentJobMessages\\\"\\n                            :showSelection=\\\"false\\\"\\n                            :allowColumnEdit=\\\"false\\\"\\n                            :allowDelete=\\\"false\\\"\\n                            :allowEdit=\\\"false\\\"\\n                            :showActions=\\\"false\\\"\\n                            :showHeader=\\\"false\\\"\\n                            class=\\\"od-job-messages-grid\\\"\\n                            :columns=\\\"jobMessagesColumns\\\">\\n                        <template #column-message=\\\"{ item }\\\">\\n                            {% block job_list_grid_job_messages %}\\n                                <div class=\\\"job_list_grid_job_messages-information\\\" style=\\\"width:100%;\\\">\\n                                    <sw-alert\\n                                            v-if=\\\"item.type == 'info-message'\\\"\\n                                            variant=\\\"info\\\"\\n                                            appearance=\\\"default\\\"\\n                                            :showIcon=\\\"true\\\"\\n                                            :closable=\\\"false\\\">\\n                                        {{ item.message }}\\n                                    </sw-alert>\\n                                    <sw-alert\\n                                            v-if=\\\"item.type == 'error-message'\\\"\\n                                            variant=\\\"error\\\"\\n                                            appearance=\\\"default\\\"\\n                                            :showIcon=\\\"true\\\"\\n                                            :closable=\\\"false\\\">\\n                                        {{ item.message }}\\n                                    </sw-alert>\\n                                    <sw-alert\\n                                            v-if=\\\"item.type == 'warning-message'\\\"\\n                                            variant=\\\"warning\\\"\\n                                            appearance=\\\"default\\\"\\n                                            :showIcon=\\\"true\\\"\\n                                            :closable=\\\"false\\\">\\n                                        {{ item.message }}\\n                                    </sw-alert>\\n                                </div>\\n                            {% endblock %}\\n                        </template>\\n                    </sw-data-grid>\\n                {% endblock %}\\n                <template #modal-footer>\\n                    <sw-button variant=\\\"primary\\\"\\n                               @click=\\\"showMessagesModal = false\\\">\\n                        {{ $tc('job-listing.page.listing.index.close') }}\\n                    </sw-button>\\n                </template>\\n            </sw-modal>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './od-grouped-view.html.twig';\nimport JobHelper from \"../../util/job.helper\";\nimport './od-grouped-view.scss';\n\nconst {Component} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nComponent.register('od-grouped-view', {\n    template,\n\n    inject: [\n        'repositoryFactory'\n    ],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        jobTypes: {\n            type: Array,\n            required: false,\n            default: () => []\n        },\n        groupCreationDate: {\n            type: Object,\n            required: false,\n            default: () => {}\n        },\n        sortType: {\n            type: String,\n            required: true,\n            default: () => 'status'\n        }\n    },\n\n    data() {\n        return {\n            groupedItems: [],\n            isLoading: false,\n            showJobInfoModal: false,\n            showJobSubsModal: false,\n            currentJobID: null,\n            showMessagesModal: false,\n            currentJobMessages: null,\n        }\n    },\n\n    computed: {\n        jobRepository() {\n            return this.repositoryFactory.create('od_scheduler_job');\n        },\n\n        messageRepository() {\n            return this.repositoryFactory.create('od_scheduler_job_message');\n        },\n\n        jobMessagesColumns() {\n            return [\n                {\n                    property: 'message',\n                    dataIndex: 'message',\n                    label: this.$tc('job-listing.page.listing.grid.column.message'),\n                    allowResize: false,\n                    align: 'left',\n                    width: '90px'\n                }\n            ]\n        },\n\n        columns() {\n            return [\n                {\n                    property: 'name',\n                    label: this.$tc('job-listing.page.listing.grid.column.name'),\n                    allowResize: true,\n                    width: '500px',\n                },\n                {\n                    property: 'status',\n                    label: this.$tc('job-listing.page.listing.grid.column.status'),\n                    allowResize: true,\n                    width: '150px',\n                },\n                {\n                    property: 'startedAt',\n                    label: this.$tc('job-listing.page.listing.grid.column.started-at'),\n                    allowResize: true,\n                    width: '170px',\n                },\n                {\n                    property: 'finishedAt',\n                    label: this.$tc('job-listing.page.listing.grid.column.finished-at'),\n                    allowResize: true,\n                    width: '170px',\n                },\n                {\n                    property: 'createdAt',\n                    label: this.$tc('job-listing.page.listing.grid.column.created-at'),\n                    allowResize: true,\n                    width: '170px',\n                },\n                {\n                    property: 'subJobs',\n                    label: this.$tc('job-listing.page.listing.grid.column.child-jobs'),\n                    allowResize: true,\n                    width: '250px',\n                    visible: true,\n                    sortable: false,\n                },\n                {\n                    property: 'messages',\n                    label: this.$tc('job-listing.page.listing.grid.column.messages'),\n                    allowResize: true,\n                    width: '350px',\n                    visible: true,\n                    sortable: false,\n                }\n            ];\n        },\n    },\n\n    created() {\n        this.initGroupedView();\n    },\n\n    watch: {\n        sortType() {\n            this.groupedItems = [];\n            this.initGroupedView();\n        },\n        groupCreationDate:{\n            handler() {\n                this.groupedItems = [];\n                this.initGroupedView();\n            },\n            deep: true\n        }\n    },\n\n    methods: {\n        initGroupedView() {\n            this.isLoading = true;\n            const criteria = new Criteria();\n            criteria.addFilter(Criteria.equals('parentId', null));\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC', false));\n            criteria.addAssociation('messages');\n            criteria.addAssociation('subJobs');\n            criteria.limit = null;\n\n            if (this.jobTypes !== []) {\n                criteria.addFilter(Criteria.equalsAny('type', this.jobTypes));\n            }\n\n            if(this.groupCreationDate.fromDate){\n                criteria.addFilter(Criteria.range('createdAt', { gte: this.groupCreationDate.fromDate }));\n            }\n\n            if(this.groupCreationDate.toDate){\n                criteria.addFilter(Criteria.range('createdAt', { lte: this.groupCreationDate.toDate }));\n            }\n\n            return this.jobRepository.search(criteria, Shopware.Context.api).then(items => {\n                this.sortJobs(items)\n            });\n        },\n\n        sortJobs(items) {\n            this.groupedItemsTypes = [];\n            this.groupedItems = [];\n            items.forEach((item) => {\n                let index = this.groupedItemsTypes.findIndex(e => e.title === item[this.sortType])\n                if (index === -1) {\n                    this.groupedItemsTypes.push({\n                        title: item[this.sortType]\n                    })\n                }\n            })\n\n            this.getJobsByType(this.groupedItemsTypes);\n        },\n\n        getJobsByType(types) {\n            types.forEach((type) => {\n                const criteria = new Criteria();\n                criteria.addFilter(Criteria.equals('parentId', null));\n                criteria.addSorting(Criteria.sort('createdAt', 'DESC', false));\n                criteria.addAssociation('messages');\n                criteria.addAssociation('subJobs');\n\n                if(this.groupCreationDate.fromDate){\n                    criteria.addFilter(Criteria.range('createdAt', { gte: this.groupCreationDate.fromDate }));\n                }\n\n                if(this.groupCreationDate.toDate){\n                    criteria.addFilter(Criteria.range('createdAt', { lte: this.groupCreationDate.toDate }));\n                }\n\n                if (this.jobTypes !== []) {\n                    criteria.addFilter(Criteria.equalsAny('type', this.jobTypes));\n                }\n\n                if (this.sortType === 'status') {\n                    criteria.addFilter(Criteria.equals('status', type.title));\n                }\n\n                if (this.sortType === 'type') {\n                    criteria.addFilter(Criteria.equals('type', type.title));\n                }\n\n                this.jobRepository.search(criteria, Shopware.Context.api).then(items => {\n                    const groupType = this.sortType === 'status' ? type.title.toUpperCase() : items[0].name;\n                    const groupTitle = this.sortType === 'status'\n                        ? this.$tc('job-listing.page.listing.grid.job-status.' + type.title)\n                        : items[0].name;\n                    this.groupedItems.push({\n                        title: groupTitle,\n                        type: groupType,\n                        items: JobHelper.sortMessages(items)\n                    });\n                });\n            })\n\n            this.isLoading = false;\n\n            return this.groupedItems;\n        },\n\n        getMessagesCount(job, type) {\n            return job.messages.filter(function (item) {\n                return item.type === type + '-message';\n            }).length;\n        },\n\n        getChildrenCount(job, type) {\n            return job.subJobs.filter(function (item) {\n                return item.status === type;\n            }).length;\n        },\n\n        onRefresh() {\n            this.initGroupedView();\n        },\n\n        canDelete(item) {\n            return ['error', 'succeed'].indexOf(item.status) !== -1;\n        },\n\n        onDeleteJob(jobId) {\n            this.jobRepository.delete(jobId, Shopware.Context.api).then(() => {\n                this.updateList();\n            });\n        },\n\n        rescheduleJob(jobId) {\n            this.OdRescheduleService.rescheduleJob(jobId).then(() => {\n                this.createNotificationSuccess({\n                    message: \"Job has been rescheduled successfully.\",\n                });\n                this.updateList();\n            }).catch(() => {\n                this.createNotificationError({\n                    message: \"Unable reschedule job.\",\n                });\n            })\n        },\n\n        showJobInfo(jobId) {\n            this.currentJobID = jobId;\n            this.showJobInfoModal = true\n        },\n\n        showSubJobs(jobId) {\n            this.currentJobID = jobId;\n            this.showJobSubsModal = true\n        },\n\n        showJobMessages(job) {\n            this.currentJobMessages = job.messages;\n            this.showMessagesModal = true\n        }\n    },\n\n    beforeDestroy() {\n        clearInterval(this.reloadInterval)\n    },\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./od-job-listing-index.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../../../vendor/shopware/administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"6e2f8636\", content, true, {});"],"sourceRoot":""}